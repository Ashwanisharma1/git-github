#!/usr/bin/env python3

import sys
import os
import yaml
import tempfile
import subprocess
import configparser
import pycurl
import xml.etree.ElementTree as ET
import gzip
import shutil
import hashlib
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor

ns = {
  'common': 'http://linux.duke.edu/metadata/common',
  'repo':   'http://linux.duke.edu/metadata/repo',
  'rpm':    'http://linux.duke.edu/metadata/rpm'
}

class RedHatRepository:
    def __init__(self,server,username,basearch,releasever,name,base,rpms,proxy):
        self.server = server
        self.username = username
        self.basearch = basearch
        self.releasever = releasever
        self.reponame = name
        self.repobase = os.path.join(base,releasever,basearch,name)
        self.rpms = rpms
        self.proxy = proxy
        
    def parse_ini(self):
        with tempfile.TemporaryDirectory() as tmp:
            subprocess.run(["scp", self.username+'@'+self.server+':/etc/yum.repos.d/redhat.repo', tmp],stdout=subprocess.DEVNULL,stderr=subprocess.STDOUT)
            config = configparser.ConfigParser()
            config.read(os.path.join(tmp,'redhat.repo'))
            config.sections()
            ini = config[self.reponame]
            self.certtmp = tempfile.TemporaryDirectory()
            for n in ['sslclientcert','sslclientkey','sslcacert']:
                subprocess.run(["scp", self.username+'@'+self.server+':'+ini[n], self.certtmp.name+'/'+n+'.pem'],stdout=subprocess.DEVNULL,stderr=subprocess.STDOUT)
            self.baseurl=ini['baseurl'].replace("$basearch", self.basearch).replace("$releasever", self.releasever)
        for n in [self.rpms,os.path.join(self.repobase,'Packages'),os.path.join(self.repobase,'repodata')]:
            os.makedirs(os.path.join(n),exist_ok=True)

    def get_repodata(self):
        self.metatmp = tempfile.mkdtemp(prefix='rh-repodata-',dir=self.rpms)
        os.mkdir(os.path.join(self.metatmp,'repodata'), mode=0o755)
        self.download(self.baseurl+'/repodata/repomd.xml',os.path.join(self.metatmp,'repodata','repomd.xml'))
        tree = ET.parse(os.path.join(self.metatmp,'repodata','repomd.xml'))
        root = tree.getroot()
        self.primary_gzip = os.path.join(self.metatmp,root.find('repo:data[@type="primary"]/repo:location', ns).attrib.get('href'))
        locations = root.findall('repo:data[@type]/repo:location', ns)
        pool = ThreadPoolExecutor(max_workers=15)
        for location in locations:
            pool.submit(self.download, self.baseurl+'/'+location.attrib.get('href'), os.path.join(self.metatmp,location.attrib.get('href')))
        pool.shutdown(wait=True)

    def uncompress_primary(self):
        with gzip.open(self.primary_gzip, 'rb') as f_in:
            with open(os.path.join(self.metatmp,'primary.xml'), 'wb') as f_out:
                shutil.copyfileobj(f_in, f_out)

    def get_primary_rpms(self):
        parser = ET.iterparse(os.path.join(self.metatmp,'primary.xml'),events=['start','end'])
        event, root = next(parser)
        rpm_node = False
        self.download_pool = ThreadPoolExecutor(max_workers=15)
        for event, element in parser:
            if (event == 'start' and element.tag == '{http://linux.duke.edu/metadata/common}package' and element.attrib.get('type') == 'rpm'):
                rpm_node = True
            if (event == 'end' and element.tag == '{http://linux.duke.edu/metadata/common}package' and element.attrib == {}):
                rpm_node = False
            if (event == 'start' and element.tag == '{http://linux.duke.edu/metadata/common}location' and rpm_node == True):
                rpm = os.path.join(self.repobase,element.attrib.get('href'))
                if os.path.exists(rpm) == False:
                    package = os.path.basename(rpm)
                    package_link = os.path.join(self.rpms,package[:1],package) 
                    hash_file = os.path.realpath(package_link)
                    if os.path.exists(package_link) == True:
                        os.makedirs(os.path.dirname(rpm),exist_ok=True)
                        self.relsymlink(hash_file, rpm)
                    else:
                        self.download_pool.submit(self.download_rpm, self.baseurl+'/'+element.attrib.get('href'), rpm)
                root.clear()
            element.clear()

    def download_rpm(self,url,dest):
        tmp_rpm = tempfile.NamedTemporaryFile(delete=False,dir=self.rpms)
        os.chmod(tmp_rpm.name, 0o644)
        self.curl(url, tmp_rpm)

        tmp_rpm.seek(0)
        sum = hashlib.sha256()
        while True:
            data = tmp_rpm.read(65536)
            if not data:
                break
            sum.update(data)
        tmp_rpm.close()
        hash = (sum.hexdigest())

        hashdir = os.path.join(self.rpms, hash[:2])

        for n in [hashdir, os.path.dirname(dest)]:
            os.makedirs(n,exist_ok=True)

        os.rename(tmp_rpm.name, os.path.join(hashdir, hash))
        self.relsymlink(os.path.join(hashdir, hash), dest)

        package = os.path.basename(dest)

        os.makedirs(os.path.join(self.rpms,package[:1]),mode=0o755,exist_ok=True)

        self.relsymlink(os.path.join(hashdir, hash), os.path.join(self.rpms,package[:1],package)) 

    def download(self,url,dest):
        with open(dest, 'wb') as f:
            self.curl(url,f)
        os.chmod(dest, 0o644)

    def curl(self,url,fh):
        c = pycurl.Curl()
        c.setopt(c.URL, url)
        c.setopt(c.FOLLOWLOCATION, True)
        c.setopt(c.SSL_VERIFYPEER, 1) # was 1
        c.setopt(c.SSL_VERIFYHOST, 2) # was 2
        c.setopt(c.CAINFO, os.path.join(self.certtmp.name,'sslcacert.pem'))
        c.setopt(c.SSLKEY, os.path.join(self.certtmp.name,'sslclientkey.pem'))
        c.setopt(c.SSLCERT, os.path.join(self.certtmp.name,'sslclientcert.pem'))
        c.setopt(c.WRITEDATA, fh)
        c.setopt(pycurl.PROXY, self.proxy)
        c.perform()
        c.close()

    def relsymlink(self,target,name):
        diff = os.path.relpath(os.path.dirname(target), os.path.dirname(name))
        os.symlink(os.path.join(diff,os.path.basename(target)), name)

    def update_repodata(self):
        new = sorted(os.listdir(os.path.join(self.metatmp,'repodata')))
        old = sorted(os.listdir(os.path.join(self.repobase,'repodata')))
        try:        
            old.remove('repomd.xml')
        except:
            pass
        new.remove('repomd.xml')
        
        remove = sorted(list(set(old) - set(new)))
        move = sorted(list(set(new) - set(old)))
        move.append('repomd.xml')

        for n in move:
            shutil.move(os.path.join(self.metatmp,'repodata',n), os.path.join(self.repobase,'repodata',n))
        
        for n in remove:
            os.remove(os.path.join(self.repobase,'repodata',n))

        shutil.rmtree(self.metatmp)

def main() -> int:
    os.umask(0o022)
    with open('config.yml', 'r') as file:
        config = yaml.safe_load(file)
    for server in config['servers']:
        for name,conf in server.items():
            for repo,dest in conf['repos'].items():
                a = RedHatRepository(name,conf['user'],conf['basearch'],conf['releasever'],repo,dest,config['content']['store'],config['proxy'])
                a.parse_ini()
                a.get_repodata()
                a.uncompress_primary()
                a.get_primary_rpms()
                a.download_pool.shutdown(wait=True)
                a.update_repodata()
    return 0

if __name__ == '__main__':
    sys.exit(main())
